<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- This program is free software; you can redistribute it and/or      -->
<!-- modify it under the terms of the GNU General Public License as     -->
<!-- published by the Free Software Foundation; either version 2 of the -->
<!-- License, or (at your option) any later version.                    -->
<!--                                                                    -->
<!-- This program is distributed in the hope that it will be useful,    -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of     -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      -->
<!-- GNU General Public License for more details.                       -->
<!--                                                                    -->
<!-- You should have received a copy of the GNU General Public License  -->
<!-- along with this program; if not, write to the                      -->
<!-- Free Software Foundation, Inc.,                                    -->
<!-- 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             -->

<!--
     Sipp scenario for INVITE -> 401Unauthorized -> INVITE call flow:

      INVITE - - - - - >
         401 < - - - - -
         ACK - - - - - >
      INVITE - - - - - >
         100 < - - - - -
         180 < - - - - -
         200 < - - - - -
         ACK - - - - - >
       Pause [    __._s]
         BYE - - - - - >
         200 < - - - - -
-->

<scenario name="invite-401-invite">

    <!-- We just want to use seconds since Epoch as an SDP <session id> -->
    <!-- and microseconds' part as an SDP <version> in "o=" field.      -->
    <nop>
        <action>
          <gettimeofday assign_to="secs,usecs" />
          <assignstr assign_to="secs_str" value="[$secs]" />
          <assignstr assign_to="usecs_str" value="[$usecs]" />
          <ereg regexp="([0-9]+)\." search_in="var" variable="secs_str"  check_it="true" assign_to="dummy,secs_int"/>
          <ereg regexp="([0-9]+)\." search_in="var" variable="usecs_str" check_it="true" assign_to="dummy,usecs_int"/>
        </action>
    </nop>

    <pause min="1" max="5000"/>

    <!-- Send the first INVITE (with no SDP, it will be rejected anyway) -->
    <send retrans="500">
        <![CDATA[
    
          INVITE sip:[service]@[field1]:[remote_port] SIP/2.0
          Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
          From: "[field0]" <sip:[field0]@[field1]>;tag=[pid]SIPpTag00[call_number]
          To: "[service]" <sip:[service]@[field1]:[remote_port]>
          Call-ID: [call_id]
          CSeq: [cseq] INVITE
          Contact: <sip:[field0]@[local_ip]:[local_port];transport=[transport]>
          Max-Forwards: 70
          Subject: Performance Test
          Content-Type: application/sdp
          Content-Length: [len]
    
          v=0
          s=Performance Test Stream [call_number]
          o=[field0] [$secs_int] [$usecs_int] IN IP[local_ip_type] [local_ip]
          c=IN IP[media_ip_type] [media_ip]
          t=0 0
          m=audio [media_port] RTP/AVP 8
          a=rtpmap:8 PCMA/8000
          a=sendrecv
          a=ptime:20
    
        ]]>
    </send>

    <!-- We may get "Trying" -->
    <recv response="100" optional="true"  timeout="100000">
    </recv>
    
    <!-- We should receive "401 Unauthorized" -->
    <recv response="407" auth="true">
    </recv>
    
    <!-- Send ACK back -->
    <send>
        <![CDATA[
    
          ACK sip:[service]@[field1]:[remote_port] SIP/2.0
          Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
          From: "[field0]" <sip:[field0]@[field1]>;tag=[pid]SIPpTag00[call_number]
          To: "[service]" <sip:[service]@[field1]:[remote_port]>[peer_tag_param]
          Call-ID: [call_id]
          CSeq: [cseq] ACK
          Contact: sip:[field0]@[local_ip]:[local_port];transport=[transport]
          Max-Forwards: 70
          Subject: Performance Test
          Content-Length: 0
    
        ]]>
    </send>
    
    <!-- Send the next INVITE, with SDP -->
    <send retrans="500">
        <![CDATA[
    
          INVITE sip:[service]@[field1]:[remote_port] SIP/2.0
          Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
          From: "[field0]" <sip:[field0]@[field1]>;tag=[pid]SIPpTag00[call_number]
          To: "[service]" <sip:[service]@[field1]:[remote_port]>
          Call-ID: [call_id]
          CSeq: [cseq] INVITE
          Contact: sip:[field0]@[local_ip]:[local_port];transport=[transport]
          [field2]
          Max-Forwards: 70
          Subject: Performance Test
          Content-Type: application/sdp
          Content-Length: [len]
    
          v=0
          s=Performance Test Stream [call_number]
          o=[field0] [$secs_int] [$usecs_int] IN IP[local_ip_type] [local_ip]
          c=IN IP[media_ip_type] [media_ip]
          t=0 0
          m=audio [media_port] RTP/AVP 8
          a=rtpmap:8 PCMA/8000
          a=sendrecv
          a=ptime:20
    
        ]]>
    </send>
    
    <!-- We may get "Trying" -->
    <recv response="100" optional="true">
    </recv>
    
    <!-- We may get "Ringing" -->
    <recv response="180" optional="true">
    </recv>
    
    <!-- We should get "OK" -->
    <recv response="200" rrs="true" td="true">
        <action>
            <ereg regexp="sip:[^&gt;]+" search_in="hdr" header="Contact:" check_it="true" assign_to="ct_hdr" />
        </action>
    </recv>
    
    <!-- Send ACK back -->
    <send>
        <![CDATA[
    
          ACK [$ct_hdr] SIP/2.0
          [routes]
          Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
          From: "[field0]" <sip:[field0]@[field1]:[local_port]>;tag=[pid]SIPpTag00[call_number]
          To: "[service]" <sip:[service]@[field1]:[remote_port]>[peer_tag_param]
          Call-ID: [call_id]
          CSeq: [cseq] ACK
          Contact: sip:[field0]@[local_ip]:[local_port];transport=[transport]
          Max-Forwards: 70
          Subject: Performance Test
          Content-Length: 0
    
        ]]>
    </send>
    
    <!-- Play a pre-recorded PCAP file (RTP stream)                       -->
    <nop>
      <action>
        <exec play_pcap_audio="silence-pcma.pcap"/>
      </action>
    </nop>
    <!-- This "pause" can be adusted with -d <milliseconds> in command line -->
    <pause milliseconds="300000"/>
    
    <!-- Send goodBYE -->
    <send retrans="500">
        <![CDATA[
    
          BYE [$ct_hdr] SIP/2.0
          [routes]
          Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
          From: "[field0]" <sip:[field0]@[field1]:[local_port]>;tag=[pid]SIPpTag00[call_number]
          To: "[service]" <sip:[service]@[field1]:[remote_port]>[peer_tag_param]
          Call-ID: [call_id]
          CSeq: [cseq] BYE
          Contact: sip:[field0]@[local_ip]:[local_port];transport=[transport]
          Max-Forwards: 70
          Subject: Performance Test
          Content-Length: 0
    
        ]]>
    </send>
    
    <!-- We should get "OK" -->
    <recv response="200" crlf="true">
    </recv>
    
    <!-- definition of the response time repartition table (unit is ms)   -->
    <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>
    
    <!-- definition of the call length repartition table (unit is ms)     -->
    <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>
    
    <Reference variables="dummy">

</scenario>
    
